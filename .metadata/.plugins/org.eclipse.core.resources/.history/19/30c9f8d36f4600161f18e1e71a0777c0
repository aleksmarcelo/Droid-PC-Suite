package dpcs;

import java.awt.EventQueue;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

@SuppressWarnings("serial")
public class Buildpropeditor extends JFrame {
	JTextArea Buildpropeditorwindow;
	private JPanel contentPane;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Buildpropeditor frame = new Buildpropeditor();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public Buildpropeditor() {
		setResizable(false);
		setTitle("Build.prop Editor");
		setIconImage(Toolkit.getDefaultToolkit().getImage(Buildpropeditor.class.getResource("/graphics/Icon.png")));
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setBounds(100, 100, 700, 520);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(0, 0, 698, 415);
		contentPane.add(scrollPane);

		Buildpropeditorwindow = new JTextArea();
		scrollPane.setViewportView(Buildpropeditorwindow);
		
		JButton btnRefresh = new JButton("Refresh");
		btnRefresh.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					Process p1 = Runtime.getRuntime().exec("adb pull /system/build.prop");
					p1.waitFor();
					try {
						Reader reader = new FileReader(new File("build.prop"));
						Buildpropeditorwindow.read(reader, "");
					} catch (IOException e) {
						e.printStackTrace();
					}
					File file = new File("build.prop");
					if (file.exists() && !file.isDirectory()) {
						file.delete();
					}
				} catch (Exception e) {
					System.err.println(e);
				}
			}
		});
		btnRefresh.setBounds(21, 427, 200, 47);
		contentPane.add(btnRefresh);
		
		JButton btnSaveonpc = new JButton("Save to PC");
		btnSaveonpc.setBounds(250, 427, 200, 47);
		contentPane.add(btnSaveonpc);
		
		JButton btnSavetodevice = new JButton("Update on device");
		btnSavetodevice.setBounds(478, 427, 200, 47);
		contentPane.add(btnSavetodevice);
		
		JLabel label = new JLabel("");
		label.setIcon(new ImageIcon(Buildpropeditor.class.getResource("/graphics/WhiteBG.jpg")));
		label.setBounds(0, 411, 698, 77);
		contentPane.add(label);

		try {
			Process p1 = Runtime.getRuntime().exec("adb pull /system/build.prop");
			p1.waitFor();
			try {
				Reader reader = new FileReader(new File("build.prop"));
				Buildpropeditorwindow.read(reader, "");
			} catch (IOException e) {
				e.printStackTrace();
			}
			File file = new File("build.prop");
			if (file.exists() && !file.isDirectory()) {
				file.delete();
			}
		} catch (Exception e) {
			System.err.println(e);
		}
	}
}